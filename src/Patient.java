
import Database.DatabaseManager;
import java.awt.Container;
import static java.lang.Integer.parseInt;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ButtonGroup;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.proteanit.sql.DbUtils;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Raiyan
 */
public class Patient extends javax.swing.JFrame {

    /**
     * Creates new form Patient
     */
    public Patient() {

        initComponents();

        //frameColor();
        getPatient();

        ButtonGroup bg = new ButtonGroup();
        bg.add(male);
        bg.add(female);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        patient = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        name = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        male = new javax.swing.JRadioButton();
        female = new javax.swing.JRadioButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        phone = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        mail = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        address = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        src = new javax.swing.JTextField();
        delete = new javax.swing.JButton();
        date = new com.toedter.calendar.JDateChooser();
        jLabel11 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Patient Details");
        setBackground(new java.awt.Color(102, 51, 255));
        setForeground(new java.awt.Color(51, 51, 255));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(null);

        jLabel1.setFont(new java.awt.Font("Monospaced", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Patient Details");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(560, 60, 340, 36);

        patient.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        patient.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Gender", "Date Of Birth", "Contact", "Email", "Address"
            }
        ));
        jScrollPane1.setViewportView(patient);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(293, 112, 819, 450);

        jButton1.setFont(new java.awt.Font("Monospaced", 1, 24)); // NOI18N
        jButton1.setText("Insert");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(69, 599, 150, 49);

        jLabel2.setFont(new java.awt.Font("Monospaced", 1, 20)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("New Entry");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(95, 88, 108, 27);

        jLabel3.setFont(new java.awt.Font("Monospaced", 1, 16)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Patient Name");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(85, 145, 130, 22);

        name.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        name.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(name);
        name.setBounds(50, 173, 201, 36);

        jLabel4.setFont(new java.awt.Font("Monospaced", 1, 16)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Select");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(72, 215, 68, 22);

        jLabel5.setFont(new java.awt.Font("Monospaced", 1, 16)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Gender");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(72, 244, 68, 22);

        male.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        male.setForeground(new java.awt.Color(255, 255, 255));
        male.setSelected(true);
        male.setText("Male");
        getContentPane().add(male);
        male.setBounds(158, 213, 57, 29);

        female.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        female.setForeground(new java.awt.Color(255, 255, 255));
        female.setText("Female");
        getContentPane().add(female);
        female.setBounds(158, 242, 73, 29);

        jLabel6.setFont(new java.awt.Font("Monospaced", 1, 16)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Date of Birth");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(82, 278, 130, 22);

        jLabel7.setFont(new java.awt.Font("Monospaced", 1, 16)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Contact");
        getContentPane().add(jLabel7);
        jLabel7.setBounds(90, 348, 130, 22);

        phone.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        phone.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(phone);
        phone.setBounds(50, 376, 201, 36);

        jLabel8.setFont(new java.awt.Font("Monospaced", 1, 16)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Email");
        getContentPane().add(jLabel8);
        jLabel8.setBounds(85, 423, 130, 22);

        mail.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        mail.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(mail);
        mail.setBounds(46, 451, 201, 36);

        jLabel9.setFont(new java.awt.Font("Monospaced", 1, 16)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("Address");
        getContentPane().add(jLabel9);
        jLabel9.setBounds(80, 498, 130, 22);

        address.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        address.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(address);
        address.setBounds(46, 526, 201, 36);

        jLabel10.setFont(new java.awt.Font("Monospaced", 1, 20)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("Search Here");
        getContentPane().add(jLabel10);
        jLabel10.setBounds(1166, 326, 132, 27);

        src.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        src.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        src.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                srcKeyReleased(evt);
            }
        });
        getContentPane().add(src);
        src.setBounds(1130, 359, 201, 36);

        delete.setFont(new java.awt.Font("Monospaced", 1, 24)); // NOI18N
        delete.setText("Delete");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });
        getContentPane().add(delete);
        delete.setBounds(656, 599, 150, 49);

        date.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        getContentPane().add(date);
        date.setBounds(55, 306, 176, 34);

        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/projectInnerPicture.jpg"))); // NOI18N
        jLabel11.setText("jLabel11");
        getContentPane().add(jLabel11);
        jLabel11.setBounds(-10, -6, 1370, 730);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            setPatient();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Data Inserted Successfully!" + ex, "Connection Status", JOptionPane.INFORMATION_MESSAGE);

            Logger.getLogger(Patient.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void srcKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_srcKeyReleased

        ResultSet rs;
        DatabaseManager patientData = DatabaseManager.getInstace();
        PreparedStatement pst;
        String search = src.getText();

        try {
            if (search.matches("^[0-9]+$") && search.charAt(0) != '0') {
                String query = "Select * from tbl_patient where patientId = " + search;
                pst = patientData.getPreparedStatement(query);
                rs = pst.executeQuery();
                patient.setModel(DbUtils.resultSetToTableModel(rs));
            } else {
                String query = "Select * from tbl_patient where pt_name Like '%" + search + "%' or pt_gender Like '" + search + "%' or pt_address Like '%" + search + "%' or pt_email Like '%" + search + "%' or pt_contact Like '%" + search + "%' or pt_birthdate Like '%" + search + "%'";
                pst = patientData.getPreparedStatement(query);
                rs = pst.executeQuery();
                patient.setModel(DbUtils.resultSetToTableModel(rs));
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Please Check Database.Something is Wrong!!", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_srcKeyReleased

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed

        int row = patient.getSelectedRow();
        Delete(row);

    }//GEN-LAST:event_deleteActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        this.setSize(1400, 760);
    }//GEN-LAST:event_formWindowOpened

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Patient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Patient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Patient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Patient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Patient().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField address;
    private com.toedter.calendar.JDateChooser date;
    private javax.swing.JButton delete;
    private javax.swing.JRadioButton female;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField mail;
    private javax.swing.JRadioButton male;
    private javax.swing.JTextField name;
    private javax.swing.JTable patient;
    private javax.swing.JTextField phone;
    private javax.swing.JTextField src;
    // End of variables declaration//GEN-END:variables

    private void getPatient() {
        DefaultTableModel mod = (DefaultTableModel) patient.getModel();
        while (mod.getRowCount() > 0) {
            mod.removeRow(0);
        }

        DatabaseManager patientData = DatabaseManager.getInstace();

        if (patientData.checkConnection()) {
            String query = "Select * from tbl_Patient";
            ResultSet rset = null;
            try {
                rset = patientData.getResult(query);
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Please Check Database.Something is Wrong!!", "Warning", JOptionPane.WARNING_MESSAGE);
                Logger.getLogger(Patient.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                while (rset.next()) { //gender bd cnt em add
                    int id = rset.getInt("patientId");
                    String nam = rset.getString("pt_name");
                    String gender = rset.getString("pt_gender");
                    String bday = rset.getString("pt_birthdate");
                    String contact = rset.getString("pt_contact");
                    String email = rset.getString("pt_email");
                    String address = rset.getString("pt_address");

                    Object[] row = {id, nam, gender, bday, contact, email, address};

                    DefaultTableModel model = (DefaultTableModel) patient.getModel();
                    model.addRow(row);

                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Please Check Database.Something is Wrong!!", "Warning", JOptionPane.WARNING_MESSAGE);
                Logger.getLogger(Patient.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void clear() {

        name.setText("");
        phone.setText("");
        mail.setText("");
        address.setText("");
        male.setSelected(true);
    }

    private void setPatient() throws SQLException {
        String nam = name.getText();
        String ph = phone.getText();
        String email = mail.getText();
        String add = address.getText();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        String bd = sdf.format(date.getDate());

        String gen = null;

        if (male.isSelected()) {
            gen = "male";
        } else if (female.isSelected()) {
            gen = "female";
        }

        if (nam.isEmpty() || ph.isEmpty() || email.isEmpty() || gen.isEmpty() || bd.isEmpty() || add.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please Fill The Entry Form Correctly", "Warning", JOptionPane.WARNING_MESSAGE);
        } else {

            try {
                DatabaseManager patientData = DatabaseManager.getInstace();

                String query = "INSERT into tbl_patient(pt_name,pt_gender,pt_birthdate,pt_contact,pt_email,pt_address) VALUES(?,?,?,?,?,?)";
                PreparedStatement pst = patientData.getPreparedStatement(query);

                pst.setString(1, nam);
                pst.setString(2, gen);
                pst.setString(3, bd);
                pst.setString(4, ph);
                pst.setString(5, email);
                pst.setString(6, add);

                pst.executeUpdate();

                JOptionPane.showMessageDialog(null, "Data Inserted Successfully!", "Connection Status", JOptionPane.INFORMATION_MESSAGE);

                getPatient();

                clear();
            } catch (Exception e) {

                JOptionPane.showMessageDialog(null, "Please Check The Connection Settings!\nOr Fill The From Correctly", "Error!", JOptionPane.ERROR_MESSAGE);

            }
        }
    }

    private void frameColor() {
        Container c;
        JLabel imageLabel;
        ImageIcon img;

        c = this.getContentPane();
        c.setLayout(null);

        img = new ImageIcon(getClass().getResource("img2.jpg"));
        imageLabel = new JLabel(img);
        imageLabel.setBounds(0, 0, img.getIconWidth(), img.getIconHeight());
        c.add(imageLabel);

        //Icon Set
        img = new ImageIcon(getClass().getResource("img2.jpg"));
        this.setIconImage(img.getImage());
    }

    private void Delete(int row) {

        Object index = patient.getValueAt(row, 0);

        try {
            DatabaseManager patientData = DatabaseManager.getInstace();

            String query = "DELETE FROM tbl_patient Where patientID = " + index;
            PreparedStatement pst = patientData.getPreparedStatement(query);

            pst.executeUpdate();

            JOptionPane.showMessageDialog(null, "Data Deleted Successfully!", "Connection Status", JOptionPane.INFORMATION_MESSAGE);

            getPatient();
        } catch (Exception e) {

            JOptionPane.showMessageDialog(null, "Please Check The Connection Settings!\nOr Fill The From Correctly", "Error!", JOptionPane.ERROR_MESSAGE);

        }
    }

    public void setPatientComboBox(JComboBox patientComboBox) {
        DatabaseManager patientData = DatabaseManager.getInstace();

        if (patientData.checkConnection()) {
            ResultSet rset = null;
            try {
                String query = "Select * from tbl_patient";
                rset = patientData.getResult(query);
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Please Check Database.Something is Wrong!!", "Warning", JOptionPane.WARNING_MESSAGE);
                Logger.getLogger(Patient.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                while (rset.next()) {
                    String patientName = rset.getString("pt_name");
                    patientComboBox.addItem(patientName);

                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Please Check Database.Something is Wrong!!", "Warning", JOptionPane.WARNING_MESSAGE);
                Logger.getLogger(Patient.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }

    public int getPatientID(String patientName) {
        DatabaseManager patientData = DatabaseManager.getInstace();
        int patientID = 0;
        if (patientData.checkConnection()) {
            ResultSet rset = null;
            try {
                String query = "Select patientId from tbl_patient where pt_name = " + "'" + patientName + "';";
                rset = patientData.getResult(query);
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Please Check Database.Something is Wrong!!", "Warning", JOptionPane.WARNING_MESSAGE);
                Logger.getLogger(Patient.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                while (rset.next()) {
                    patientID = Integer.parseInt(rset.getString("patientId"));
                }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Please Check Database.Something is Wrong!!", "Warning", JOptionPane.WARNING_MESSAGE);
                Logger.getLogger(Patient.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return patientID;

    }
}
