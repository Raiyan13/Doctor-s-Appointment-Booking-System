
import Database.DatabaseManager;
import java.awt.Container;
import java.awt.HeadlessException;
import static java.lang.Integer.parseInt;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.proteanit.sql.DbUtils;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Raiyan
 */
public class Chamber extends javax.swing.JFrame {

    /**
     * Creates new form ChamberFrame
     */
    public Chamber() {
        initComponents();
        //frameColor();
        getChamber();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        chamber = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        rn = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        hf = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        src = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        phone = new javax.swing.JTextField();
        delete = new javax.swing.JButton();
        hospitalComboBox = new javax.swing.JComboBox<>();
        employeeComboBox = new javax.swing.JComboBox<>();
        doctorComboBox = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Chamber Details");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(null);

        chamber.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        chamber.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Chamber ID", "Floor", "Room No", "Contact", "Doctor ID", "Hospital ID", "Employee ID"
            }
        ));
        jScrollPane1.setViewportView(chamber);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(275, 134, 820, 450);

        jLabel1.setFont(new java.awt.Font("Monospaced", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Chamber Details");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(540, 70, 350, 48);

        jLabel2.setFont(new java.awt.Font("Monospaced", 1, 20)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("New Entry");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(84, 97, 108, 27);

        jLabel3.setFont(new java.awt.Font("Monospaced", 1, 16)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Doctor Name");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(90, 210, 110, 22);

        jLabel4.setFont(new java.awt.Font("Monospaced", 1, 16)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Hospital Name");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(80, 140, 130, 22);

        rn.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        rn.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        rn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rnActionPerformed(evt);
            }
        });
        getContentPane().add(rn);
        rn.setBounds(38, 380, 200, 36);

        jLabel5.setFont(new java.awt.Font("Monospaced", 1, 16)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Hospital Floor");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(63, 282, 140, 22);

        jLabel6.setFont(new java.awt.Font("Monospaced", 1, 16)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Room No");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(98, 352, 70, 22);

        hf.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        hf.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(hf);
        hf.setBounds(38, 310, 200, 36);

        jLabel7.setFont(new java.awt.Font("Monospaced", 1, 16)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Chamber Employee Name");
        getContentPane().add(jLabel7);
        jLabel7.setBounds(30, 420, 210, 25);

        jButton1.setFont(new java.awt.Font("Monospaced", 1, 24)); // NOI18N
        jButton1.setText("Insert");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(62, 611, 150, 50);

        src.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        src.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        src.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                srcKeyReleased(evt);
            }
        });
        getContentPane().add(src);
        src.setBounds(1127, 408, 200, 36);

        jLabel8.setFont(new java.awt.Font("Monospaced", 1, 20)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Search Here");
        getContentPane().add(jLabel8);
        jLabel8.setBounds(1109, 375, 229, 27);

        jLabel9.setFont(new java.awt.Font("Monospaced", 1, 16)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("Chamber Contact");
        getContentPane().add(jLabel9);
        jLabel9.setBounds(38, 500, 200, 22);

        phone.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        phone.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(phone);
        phone.setBounds(38, 528, 200, 36);

        delete.setFont(new java.awt.Font("Monospaced", 1, 24)); // NOI18N
        delete.setText("Delete");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });
        getContentPane().add(delete);
        delete.setBounds(635, 616, 117, 41);

        hospitalComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hospitalComboBoxActionPerformed(evt);
            }
        });
        getContentPane().add(hospitalComboBox);
        hospitalComboBox.setBounds(38, 170, 200, 36);

        getContentPane().add(employeeComboBox);
        employeeComboBox.setBounds(40, 450, 190, 40);

        getContentPane().add(doctorComboBox);
        doctorComboBox.setBounds(40, 240, 200, 40);

        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/projectInnerPicture.jpg"))); // NOI18N
        jLabel11.setText("jLabel11");
        getContentPane().add(jLabel11);
        jLabel11.setBounds(0, 0, 1380, 730);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            setChamber();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Please Enter Valid ID!!!" + ex, "Connection Status", JOptionPane.INFORMATION_MESSAGE);

            Logger.getLogger(Appointment.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void srcKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_srcKeyReleased
        ResultSet rs;
        DatabaseManager chamberData = DatabaseManager.getInstace();
        PreparedStatement pst;
        String search = src.getText();
        try {
            if (search.matches("^[0-9]+$") && search.charAt(0) != '0') {
                String query = "Select * from tbl_chamber where chamberID = " + search + " or hospitalID = " + search + " or employeeID = " + search + " or doctorID = " + search + " or ch_room = " + search;
                pst = chamberData.getPreparedStatement(query);
                rs = pst.executeQuery();
                chamber.setModel(DbUtils.resultSetToTableModel(rs));
            } else {
                String query = "Select * from tbl_chamber where ch_floor Like '%" + search + "%' or ch_contact Like '%" + search + "%'";
                pst = chamberData.getPreparedStatement(query);
                rs = pst.executeQuery();
                chamber.setModel(DbUtils.resultSetToTableModel(rs));
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Please Check Database.Something is Wrong!!", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_srcKeyReleased

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        this.setSize(1400, 760);
    }//GEN-LAST:event_formWindowOpened

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        int row = chamber.getSelectedRow();

        Object index = chamber.getValueAt(row, 0);

        try {
            DatabaseManager chamberData = DatabaseManager.getInstace();

            String query = "DELETE FROM tbl_chamber Where chamberID = " + index;
            PreparedStatement pst = chamberData.getPreparedStatement(query);

            pst.executeUpdate();

            JOptionPane.showMessageDialog(null, "Data Deleted Successfully!", "Connection Status", JOptionPane.INFORMATION_MESSAGE);

            getChamber();
        } catch (Exception e) {

            JOptionPane.showMessageDialog(null, "Please Check The Connection Settings!\nOr Fill The From Correctly", "Error!", JOptionPane.ERROR_MESSAGE);

        }
    }//GEN-LAST:event_deleteActionPerformed

    private void hospitalComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hospitalComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hospitalComboBoxActionPerformed

    private void rnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Chamber.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Chamber.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Chamber.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Chamber.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Chamber().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable chamber;
    private javax.swing.JButton delete;
    private javax.swing.JComboBox<String> doctorComboBox;
    private javax.swing.JComboBox<String> employeeComboBox;
    private javax.swing.JTextField hf;
    private javax.swing.JComboBox<String> hospitalComboBox;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField phone;
    private javax.swing.JTextField rn;
    private javax.swing.JTextField src;
    // End of variables declaration//GEN-END:variables

    private void getChamber() {

        Hospital hospital = new Hospital();
        hospitalComboBox.removeAllItems();
        Employee employee = new Employee();
        employeeComboBox.removeAllItems();
        Doctor doctor = new Doctor();
        doctorComboBox.removeAllItems();
        hospital.setHospitalComboBox(this.hospitalComboBox);
        employee.setEmployeeComboBox(this.employeeComboBox);
        doctor.setDoctorComboBox(this.doctorComboBox);
        DefaultTableModel mod = (DefaultTableModel) chamber.getModel();
        while (mod.getRowCount() > 0) {
            mod.removeRow(0);
        }

        DatabaseManager chamberData = DatabaseManager.getInstace();

        if (chamberData.checkConnection()) {
            ResultSet rset = null;
            try {
                String query = "Select * from tbl_chamber";
                rset = chamberData.getResult(query);
            } catch (SQLException ex) {
                Logger.getLogger(Patient.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                while (rset.next()) {
                    int che = rset.getInt("chamberId");
                    int hos = rset.getInt("hospitalId");
                    int doc = rset.getInt("doctorId");
                    int emp = rset.getInt("employeeId");
                    String contact = rset.getString("ch_contact");
                    String room = rset.getString("ch_room");
                    String floor = rset.getString("ch_floor");

                    Object[] row = {che, floor, room, contact, doc, hos, emp};

                    DefaultTableModel model = (DefaultTableModel) chamber.getModel();
                    model.addRow(row);

                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Please Check Database.Something is Wrong!!", "Warning", JOptionPane.WARNING_MESSAGE);
                Logger.getLogger(Patient.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void clear() {

        phone.setText("");
        hf.setText("");
        rn.setText("");
    }

    private void setChamber() throws SQLException {
        Hospital hospital = new Hospital();
        Employee employee = new Employee();
        Doctor doctor = new Doctor();

        String ph = phone.getText();
        String floor = hf.getText();
        String room = rn.getText();
        String doctorName = doctorComboBox.getSelectedItem().toString();
        String hsName = hospitalComboBox.getSelectedItem().toString();
        int hos = hospital.getHospitalID(hsName);
        String e = employeeComboBox.getSelectedItem().toString();
        int eid = employee.getEmployeeID(e);
        int doc = doctor.getDoctorID(doctorName);

        if (hos == 0 || ph.isEmpty() || e.isEmpty() || floor.isEmpty() || room.isEmpty() || doctorName.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please Fill The Entry Form Correctly", "Warning", JOptionPane.WARNING_MESSAGE);
        } else {

            DatabaseManager chamberData = DatabaseManager.getInstace();

            String query = "INSERT INTO tbl_Chamber(ch_floor,ch_room,ch_contact,doctorId,hospitalId,employeeId) VALUES(?,?,?,?,?,?)";
            PreparedStatement pst = chamberData.getPreparedStatement(query);

            pst.setString(1, floor);
            pst.setString(2, room);
            pst.setString(3, ph);
            pst.setInt(4, doc);
            pst.setInt(5, hos);
            pst.setInt(6, eid);

            pst.executeUpdate();

            JOptionPane.showMessageDialog(null, "Data Inserted Successfully!", "Connection Status", JOptionPane.INFORMATION_MESSAGE);

            getChamber();

            clear();

        }
    }

    public int getChamberID(int doctorID, int hospitalID) {
        DatabaseManager chamberData = DatabaseManager.getInstace();
        int chamberID = 0;
        if (chamberData.checkConnection()) {
            ResultSet rset = null;
            try {
                String query = "SELECT chamberId FROM tbl_chamber WHERE doctorId = " + doctorID + " and hospitalId = " + hospitalID + ";";
                rset = chamberData.getResult(query);
            } catch (SQLException ex) {
                Logger.getLogger(Patient.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                while (rset.next()) {
                    chamberID = Integer.parseInt(rset.getString("chamberId"));
                }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Please Check Database.Something is Wrong!!", "Warning", JOptionPane.WARNING_MESSAGE);
                Logger.getLogger(Patient.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return chamberID;

    }

    private void frameColor() {
        Container c;
        JLabel imageLabel;
        ImageIcon img;

        c = this.getContentPane();
        c.setLayout(null);

        img = new ImageIcon(getClass().getResource("img2.jpg"));
        imageLabel = new JLabel(img);
        imageLabel.setBounds(0, 0, img.getIconWidth(), img.getIconHeight());
        c.add(imageLabel);

        //Icon Set
        img = new ImageIcon(getClass().getResource("img2.jpg"));
        this.setIconImage(img.getImage());
    }
}
